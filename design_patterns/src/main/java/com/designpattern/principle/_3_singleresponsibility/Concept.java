package com.designpattern.principle._3_singleresponsibility;

/**
 * @author jk
 * @version 1.0.0
 * @create 2020/7/23 17:13
 */
public class Concept {

    /**
     *
     *
     * 3. 单一职责原则
     *    * 定义: 不要存在多于一个导致类变更的原因
     *    * 一个类/接口/方法只负责一项职责
     *    * 优点: 降低类的复杂度,提高类的可读性,提高系统的可维护性.降低变更引起的风险
     *
     *    单一职责（Simple Responsibility Pinciple，SRP）是指不要存在多于一个导致类变更的原因。
     *    假设我们有一个类负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，
     *    有可能导致另一个职责的功能发生故障。这样一来，这个类就存在两个导致类变更的原因。
     *    如何解决这个问题呢？将两个职责用两个类来实现，进行解耦。后期需求变更维护互不影响。
     *    这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险。
     *    总体来说，就是一个类、接口或方法只负责一项职责。
     *
     */
}
