package com.designpattern.principle._2_dependenceinversion;

/**
 * @author jk
 * @version 1.0.0
 * @create 2020/7/23 17:13
 */
public class Concept {

    /**
     *
     *
     * 2. 依赖倒置原则
     *    * 定义: 高层模块不应该依赖低层模块,二者都应该依赖其抽象
     *    * 抽象不应该依赖细节,细节应该依赖抽象
     *    * 针对接口编程,不要针对实现编程
     *    * 优点: 可以减少类间的耦合性,提高系统稳定性,提高代码可读性和可维护性,可降低修改程序所造成的风险
     *
     *    依赖倒置原则（Dependencoliversion Principle，DIP）是指设计代码结构时，
     *    高层模块不应该依赖低层模块,二者都应该依赖其抽象,抽象不应该依赖细节，细节应该依赖抽象。
     *    通过依赖倒置，可以减少类与类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性，
     *    并且能够降低修改程序造成的风险。
     *
     */
}
